(()=>{"use strict";var e={420:(e,n,o)=>{o.d(n,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const n=[];null!==e&&n.push(e.toString()),this.debug=console.debug.bind(console,...n),this.log=console.log.bind(console,...n),this.warn=console.warn.bind(console,...n),this.info=console.info.bind(console,...n),this.error=console.error.bind(console,...n),this.trace=console.trace.bind(console,...n),this.group=console.group.bind(console,...n),this.groupCollapsed=console.groupCollapsed.bind(console,...n)}}globalThis.Logger=t;const r=t}},n={};function o(t){var r=n[t];if(void 0!==r)return r.exports;var s=n[t]={exports:{}};return e[t](s,s.exports,o),s.exports}o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=o(420);const n=async function(e){const n=await fetch(e,{method:"GET"});if(!n.ok)throw new ReferenceError(n.statusText);return n.text()},t=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},r="https://cdn.jsdelivr.net/gh/Microsoft/TypeScript@latest/lib/typescriptServices.js",s=new e.Z("[TS]");s.log(`Loading TypeScript: ${r}`),async function(e,o=!1){return new Promise(((r,s)=>{const i=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,c=document.createElement("script");o?n(i).then((e=>{c.innerHTML=e,document.head.append(c)})).then(r).catch(s):(c.src=i,c.addEventListener("load",(async()=>{await t(),r()})),c.addEventListener("error",(()=>{c.remove(),s()})),document.head.append(c))}))}(r).then(t).then((async()=>{const{ts:e}=window;if(!e)throw new ReferenceError("ts is not defined");const{transpile:o}=e;if(!o)throw new ReferenceError("ts.transpile is not defined");const t=e=>{if(!(e instanceof HTMLScriptElement))return!1;const{src:n,type:o}=e;if(n.length>0){if(!/\.ts$/i.test(n))return!1}else{if(!(o.length>0))return!1;if(!/^text\/typescript$/.test(o))return!1}return!0},r=async e=>{if(!t(e))return;s.log("Transpiling typescript");const{src:r}=e,i=(r.length>0?await n(r):e.innerHTML).trim(),c=o(i),a=document.createElement("script");a.innerHTML=c,e.replaceWith(a),s.info("Transpiled")};s.info("Loaded TypeScript. Starting to transpile..."),await Array.from(document.getElementsByTagName("script")).filter((e=>t(e))).reduce((async(e,n,o,t)=>{await e;try{s.log(`Transpiling ${o+1} / ${t.length}`),r(n)}catch(e){const{message:n}=e;s.warn(`Transpiling failed: ${n}`)}}),Promise.resolve()),s.info("Transpiled all scripts"),new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{r(e)}))}))})).observe(document,{childList:!0,subtree:!0})})).catch((e=>{const n=e?.message??"Not found";s.warn(`Loading TypeScript failed: ${n}`)})).finally((()=>{s.log("End of TypeScript")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,