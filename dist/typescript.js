(()=>{"use strict";var e={420:(e,o,n)=>{n.d(o,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=t;const r=t}},o={};function n(t){var r=o[t];if(void 0!==r)return r.exports;var s=o[t]={exports:{}};return e[t](s,s.exports,n),s.exports}n.d=(e,o)=>{for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=n(420);const o=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},t="https://cdn.jsdelivr.net/gh/Microsoft/TypeScript@latest/lib/typescriptServices.js",r=new e.Z("[TS]");r.log(`Loading TypeScript: ${t}`),async function(e){return new Promise(((n,t)=>{const r=document.createElement("script");r.src=e,r.addEventListener("load",(async()=>{await o(),n()})),r.addEventListener("error",(()=>{t()})),document.head.append(r)}))}(t).then(o).then((async()=>{const{ts:e}=window;if(!e)throw new ReferenceError("ts is not defined");const{transpile:o}=e;if(!o)throw new ReferenceError("ts.transpile is not defined");r.info("Loaded TypeScript. Starting to transpile..."),await Array.from(document.getElementsByTagName("script")).filter((e=>/^text\/typescript$/.test(e.type)||/\.ts$/i.test(e.src))).reduce((async(e,n,t,s)=>{await e,r.log(`Transpiling ${t+1} / ${s.length}`);try{const{src:e}=n,t=e.length>0?await async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()}(e):n.innerHTML,s=o(t),c=document.createElement("script");c.innerText=s,n.replaceWith(c),r.info("Transpiled")}catch(e){const{message:o}=e;r.warn(`Transpiling failed: ${o}`)}}),Promise.resolve()),r.info("Transpiled all scripts")})).catch((e=>{const o=e?.message??"Not found";r.warn(`Loading TypeScript failed: ${o}`)})).finally((()=>{r.log("End of TypeScript")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,