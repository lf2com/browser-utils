(()=>{"use strict";var e={420:(e,o,t)=>{t.d(o,{Z:()=>r});class n{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=n;const r=n}},o={};function t(n){var r=o[n];if(void 0!==r)return r.exports;var s=o[n]={exports:{}};return e[n](s,s.exports,t),s.exports}t.d=(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=t(420);const o=async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()},n=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},r="https://cdn.jsdelivr.net/gh/Microsoft/TypeScript@latest/lib/typescriptServices.js",s=new e.Z("[TS]");s.log(`Loading TypeScript: ${r}`),async function(e,t=!1){return new Promise(((r,s)=>{const c=document.createElement("script");t?o(e).then((e=>{c.innerHTML=e,document.head.append(c)})).then(r).catch(s):(c.src=e,c.addEventListener("load",(async()=>{await n(),r()})),c.addEventListener("error",(()=>{c.remove(),s()})),document.head.append(c))}))}(r).then(n).then((async()=>{const{ts:e}=window;if(!e)throw new ReferenceError("ts is not defined");const{transpile:t}=e;if(!t)throw new ReferenceError("ts.transpile is not defined");const n=async e=>{if(!(e instanceof HTMLScriptElement))return;if(!/^text\/typescript$/.test(e.type)&&!/\.ts$/i.test(e.src))return;s.log("Transpiling typescript");const{src:n}=e,r=(n.length>0?await o(n):e.innerHTML).trim(),c=t(r),i=document.createElement("script");i.innerHTML=c,e.replaceWith(i),s.info("Transpiled")};s.info("Loaded TypeScript. Starting to transpile..."),await Array.from(document.getElementsByTagName("script")).filter((e=>/^text\/typescript$/.test(e.type)||/\.ts$/i.test(e.src))).reduce((async(e,o,t,r)=>{await e;try{s.log(`Transpiling ${t+1} / ${r.length}`),n(o)}catch(e){const{message:o}=e;s.warn(`Transpiling failed: ${o}`)}}),Promise.resolve()),s.info("Transpiled all scripts"),new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{n(e)}))}))})).observe(document,{childList:!0,subtree:!0})})).catch((e=>{const o=e?.message??"Not found";s.warn(`Loading TypeScript failed: ${o}`)})).finally((()=>{s.log("End of TypeScript")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,