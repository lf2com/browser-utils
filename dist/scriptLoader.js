(()=>{"use strict";var e={420:(e,n,o)=>{o.d(n,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const n=[];null!==e&&n.push(e.toString()),this.debug=console.debug.bind(console,...n),this.log=console.log.bind(console,...n),this.warn=console.warn.bind(console,...n),this.info=console.info.bind(console,...n),this.error=console.error.bind(console,...n),this.trace=console.trace.bind(console,...n),this.group=console.group.bind(console,...n),this.groupCollapsed=console.groupCollapsed.bind(console,...n)}}globalThis.Logger=t;const r=t}},n={};function o(t){var r=n[t];if(void 0!==r)return r.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,o),a.exports}o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=o(420);const n=async function(e){return new Promise(((n,o)=>{const t=document.createElement("script");t.src=e,t.addEventListener("load",(async()=>{await async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))}(),n()})),t.addEventListener("error",(()=>{o()})),document.head.append(t)}))},t=new e.Z("[SL]"),r=document.currentScript,a=document.createElement("style"),s=document.createElement("div"),i=`loading_${Date.now()}`,d=(e,n)=>{if(s.setAttribute("data-message",e),n){const e=Math.round(100*n);s.style.setProperty("--progress",`${e}%`)}},l=r.getAttribute("src").replace(/\/[^/]+?$/,""),c=(r.getAttribute("module")??"").split(/[|;,\s]/).map((e=>e.trim())).filter((e=>e.length>0)),g=async(e=0)=>{const o=c[e];if(o){const r=`${l}/${o}`,a=`${r}.js`,s=(e+1)/c.length;t.log(`Loading script path: ${a}`),d(`Loading module: ${o}`,s);try{await n(a)}catch(e){const a=`${r}/index.js`;t.log(`Loading failed. Try to load script path: ${a}`);try{await n(a),t.info(`Loaded script: ${o}`)}catch(e){t.warn(`Loading failed. Script not found: ${o}`)}}finally{await g(e+1)}}};async function p(){t.log("Loading modules"),await g(),t.info("Loaded all modules"),d("Loaded all modules",1),setTimeout((()=>{s.remove(),a.remove(),window.dispatchEvent(new CustomEvent("loadscript"))}),1e3)}s.id=i,a.innerText=`\n  #${i} ~ * {\n    display: none;\n  }\n  #${i} {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    color: #333;\n    background-color: #fff;\n    font-size: 13px;\n    font-family: arial;\n    font-weight: normal;\n    line-height: 1.5em;\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto) 1fr;\n    grid-template-areas: 'head' 'message' 'progress' 'tail';\n    gap: 0.25em;\n    align-items: center;\n    justify-items: center;\n  }\n  #${i}::before {\n    content: attr(data-message);\n    display: block;\n    grid-area: message;\n  }\n  #${i}::after {\n    content: '';\n    width: 20vw;\n    height: 0.8em;\n    box-sizing: border-box;\n    border-radius: 0.5em;\n    border: 1px solid #666;\n    background-image: linear-gradient(90deg,\n      #6c6 var(--progress),\n      transparent var(--progress)\n    );\n    font-size: 0.5rem;\n    display: block;\n    grid-area: progress;\n  }\n`,document.head.append(a),document.body.prepend(s),"complete"===document.readyState?p():window.addEventListener("load",p)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFRyxPQUFTLElBQ3RCQyxFQUFpQnpDLE1BQU8wQyxFQUFRLEtBQ3BDLE1BQU16RCxFQUFTaUQsRUFBUVEsR0FFdkIsR0FBSXpELEVBQVEsQ0FDVixNQUFNMEQsRUFBUSxHQUFFWixLQUFZOUMsSUFDdEIyRCxFQUFlLEdBQUVELE9BQ2pCbkIsR0FBWWtCLEVBQVEsR0FBS1IsRUFBUU0sT0FFdkN6QixFQUFPcEQsSUFBSyx3QkFBdUJpRixLQUNuQ3RCLEVBQW1CLG1CQUFrQnJDLElBQVV1QyxHQUUvQyxVQUNRcUIsRUFBV0QsR0FDakIsTUFBTzlFLEdBQ1AsTUFBTWdGLEVBQWMsR0FBRUgsYUFFdEI1QixFQUFPcEQsSUFBSyw0Q0FBMkNtRixLQUV2RCxVQUNRRCxFQUFXQyxHQUNqQi9CLEVBQU9sRCxLQUFNLGtCQUFpQm9CLEtBQzlCLE1BQU84RCxHQUNQaEMsRUFBT25ELEtBQU0scUNBQW9DcUIsTUFYckQsY0FjUXdELEVBQWVDLEVBQVEsTUFzRG5DMUMsZUFBZWdELElBQ2JqQyxFQUFPcEQsSUFBSSx5QkFDTDhFLElBQ04xQixFQUFPbEQsS0FBSyxzQkFDWnlELEVBQWtCLHFCQUFzQixHQUN4QzJCLFlBQVcsS0FDVC9CLEVBQVdnQyxTQUNYakMsRUFBYWlDLFNBQ2J4QyxPQUFPeUMsY0FBYyxJQUFJQyxZQUFZLGlCQUNwQyxLQTFETGxDLEVBQVdtQyxHQUFLbEMsRUFDaEJGLEVBQWFxQyxVQUFhLFFBQ3JCbkMsd0NBR0FBLGdkQW9CQUEsd0dBS0FBLDhWQWdCTGIsU0FBU08sS0FBS0MsT0FBT0csR0FDckJYLFNBQVNpRCxLQUFLQyxRQUFRdEMsR0FjTSxhQUF4QlosU0FBU0csV0FDWHVDLElBRUF0QyxPQUFPRixpQkFBaUIsT0FBUXdDLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvLi9zcmMvTG9nZ2VyLnRzIiwid2VicGFjazovL0BsZjJjb20vYnJvd3Nlci11dGlscy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BsZjJjb20vYnJvd3Nlci11dGlscy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0BsZjJjb20vYnJvd3Nlci11dGlscy8uL3NyYy91dGlscy93YWl0Rm9yUGFnZUxvYWRlZC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvLi9zcmMvdXRpbHMvbG9hZFNjcmlwdC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvLi9zcmMvc2NyaXB0TG9hZGVyL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmNsYXNzIExvZ2dlciB7XG4gIHJlYWRvbmx5IGRlYnVnOiB0eXBlb2YgY29uc29sZVsnZGVidWcnXSA9IGNvbnNvbGUuZGVidWc7XG5cbiAgcmVhZG9ubHkgbG9nOiB0eXBlb2YgY29uc29sZVsnbG9nJ10gPSBjb25zb2xlLmxvZztcblxuICByZWFkb25seSB3YXJuOiB0eXBlb2YgY29uc29sZVsnd2FybiddID0gY29uc29sZS53YXJuO1xuXG4gIHJlYWRvbmx5IGluZm86IHR5cGVvZiBjb25zb2xlWydpbmZvJ10gPSBjb25zb2xlLmluZm87XG5cbiAgcmVhZG9ubHkgZXJyb3I6IHR5cGVvZiBjb25zb2xlWydlcnJvciddID0gY29uc29sZS5lcnJvcjtcblxuICByZWFkb25seSB0cmFjZTogdHlwZW9mIGNvbnNvbGVbJ3RyYWNlJ10gPSBjb25zb2xlLnRyYWNlO1xuXG4gIHJlYWRvbmx5IGdyb3VwOiB0eXBlb2YgY29uc29sZVsnZ3JvdXAnXSA9IGNvbnNvbGUuZ3JvdXA7XG5cbiAgcmVhZG9ubHkgZ3JvdXBDb2xsYXBzZWQ6IHR5cGVvZiBjb25zb2xlWydncm91cENvbGxhcHNlZCddID0gY29uc29sZS5ncm91cENvbGxhcHNlZDtcblxuICByZWFkb25seSBncm91cEVuZDogdHlwZW9mIGNvbnNvbGVbJ2dyb3VwRW5kJ10gPSBjb25zb2xlLmdyb3VwRW5kO1xuXG4gIGNvbnN0cnVjdG9yKHRhZzogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBjb25zdCBiaW5kZXI6IGFueVtdID0gW107XG5cbiAgICBpZiAodGFnICE9PSBudWxsKSB7XG4gICAgICBiaW5kZXIucHVzaCh0YWcudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1ZyA9IGNvbnNvbGUuZGVidWcuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMubG9nID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMud2FybiA9IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gICAgdGhpcy5pbmZvID0gY29uc29sZS5pbmZvLmJpbmQoY29uc29sZSwgLi4uYmluZGVyKTtcbiAgICB0aGlzLmVycm9yID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gICAgdGhpcy50cmFjZSA9IGNvbnNvbGUudHJhY2UuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMuZ3JvdXAgPSBjb25zb2xlLmdyb3VwLmJpbmQoY29uc29sZSwgLi4uYmluZGVyKTtcbiAgICB0aGlzLmdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZC5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gIH1cbn1cblxuKGdsb2JhbFRoaXMgYXMgYW55KS5Mb2dnZXIgPSBMb2dnZXI7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2dlcjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLyoqXG4gKiBXYWl0cyB1bnRpbCBwYWdlIGlzIGxvYWRlZC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gd2FpdEZvclBhZ2VMb2FkZWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdsb2FkJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfSxcbiAgICAgIHsgb25jZTogdHJ1ZSB9LFxuICAgICk7XG4gIH0pO1xufVxuLyoqXG4gKiBXYWl0cyB1bnRpbCBET00gY29udGVudCBpcyBsb2FkZWQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yRE9NQ29udGVudExvYWRlZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICB9LFxuICAgICAgeyBvbmNlOiB0cnVlIH0sXG4gICAgKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdhaXRGb3JQYWdlTG9hZGVkO1xuIiwiaW1wb3J0IHdhaXRGb3JQYWdlTG9hZGVkIGZyb20gJy4vd2FpdEZvclBhZ2VMb2FkZWQnO1xuXG4vKipcbiAqIExvYWRzIHNjcmlwdC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZFNjcmlwdChzcmM6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgc2NyaXB0LnNyYyA9IHNyYztcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHdhaXRGb3JQYWdlTG9hZGVkKCk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgcmVqZWN0KCk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmQoc2NyaXB0KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvYWRTY3JpcHQ7XG4iLCJpbXBvcnQgTG9nZ2VyIGZyb20gJy4uL0xvZ2dlcic7XG5pbXBvcnQgbG9hZFNjcmlwdCBmcm9tICcuLi91dGlscy9sb2FkU2NyaXB0JztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignW1NMXScpO1xuY29uc3QgY3VycmVudFNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQhO1xuY29uc3Qgc3R5bGVMb2FkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbmNvbnN0IGRvbUxvYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmNvbnN0IGlkTG9hZGluZyA9IGBsb2FkaW5nXyR7RGF0ZS5ub3coKX1gO1xuY29uc3Qgc2V0TG9hZGluZ01lc3NhZ2UgPSAobWVzc2FnZTogc3RyaW5nLCBwcm9ncmVzcz86IG51bWJlcikgPT4ge1xuICBkb21Mb2FkaW5nLnNldEF0dHJpYnV0ZSgnZGF0YS1tZXNzYWdlJywgbWVzc2FnZSk7XG5cbiAgaWYgKHByb2dyZXNzKSB7XG4gICAgY29uc3QgcGVyY2VudGFnZSA9IE1hdGgucm91bmQoMTAwICogcHJvZ3Jlc3MpO1xuXG4gICAgZG9tTG9hZGluZy5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1wcm9ncmVzcycsIGAke3BlcmNlbnRhZ2V9JWApO1xuICB9XG59O1xuY29uc3Qgcm9vdFBhdGggPSAoY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoJ3NyYycpIGFzIHN0cmluZylcbiAgLnJlcGxhY2UoL1xcL1teL10rPyQvLCAnJyk7XG5jb25zdCBtb2R1bGVzID0gKGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdtb2R1bGUnKSA/PyAnJylcbiAgLnNwbGl0KC9bfDssXFxzXS8pXG4gIC5tYXAoKHMpID0+IHMudHJpbSgpKVxuICAuZmlsdGVyKChzKSA9PiBzLmxlbmd0aCA+IDApO1xuY29uc3QgbG9hZE5leHRNb2R1bGUgPSBhc3luYyAoaW5kZXggPSAwKSA9PiB7XG4gIGNvbnN0IG1vZHVsZSA9IG1vZHVsZXNbaW5kZXhdO1xuXG4gIGlmIChtb2R1bGUpIHtcbiAgICBjb25zdCByb290ID0gYCR7cm9vdFBhdGh9LyR7bW9kdWxlfWA7XG4gICAgY29uc3QgZGVmYXVsdFBhdGggPSBgJHtyb290fS5qc2A7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSAoaW5kZXggKyAxKSAvIG1vZHVsZXMubGVuZ3RoO1xuXG4gICAgbG9nZ2VyLmxvZyhgTG9hZGluZyBzY3JpcHQgcGF0aDogJHtkZWZhdWx0UGF0aH1gKTtcbiAgICBzZXRMb2FkaW5nTWVzc2FnZShgTG9hZGluZyBtb2R1bGU6ICR7bW9kdWxlfWAsIHByb2dyZXNzKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBsb2FkU2NyaXB0KGRlZmF1bHRQYXRoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgYmFja3VwUGF0aCA9IGAke3Jvb3R9L2luZGV4LmpzYDtcblxuICAgICAgbG9nZ2VyLmxvZyhgTG9hZGluZyBmYWlsZWQuIFRyeSB0byBsb2FkIHNjcmlwdCBwYXRoOiAke2JhY2t1cFBhdGh9YCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGxvYWRTY3JpcHQoYmFja3VwUGF0aCk7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBMb2FkZWQgc2NyaXB0OiAke21vZHVsZX1gKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2dnZXIud2FybihgTG9hZGluZyBmYWlsZWQuIFNjcmlwdCBub3QgZm91bmQ6ICR7bW9kdWxlfWApO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCBsb2FkTmV4dE1vZHVsZShpbmRleCArIDEpO1xuICAgIH1cbiAgfVxufTtcblxuZG9tTG9hZGluZy5pZCA9IGlkTG9hZGluZztcbnN0eWxlTG9hZGluZy5pbm5lclRleHQgPSBgXG4gICMke2lkTG9hZGluZ30gfiAqIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG4gICMke2lkTG9hZGluZ30ge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIGNvbG9yOiAjMzMzO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIGZvbnQtZmFtaWx5OiBhcmlhbDtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjVlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIHJlcGVhdCgyLCBhdXRvKSAxZnI7XG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogJ2hlYWQnICdtZXNzYWdlJyAncHJvZ3Jlc3MnICd0YWlsJztcbiAgICBnYXA6IDAuMjVlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgfVxuICAjJHtpZExvYWRpbmd9OjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS1tZXNzYWdlKTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBncmlkLWFyZWE6IG1lc3NhZ2U7XG4gIH1cbiAgIyR7aWRMb2FkaW5nfTo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHdpZHRoOiAyMHZ3O1xuICAgIGhlaWdodDogMC44ZW07XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBib3JkZXItcmFkaXVzOiAwLjVlbTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjY2O1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCg5MGRlZyxcbiAgICAgICM2YzYgdmFyKC0tcHJvZ3Jlc3MpLFxuICAgICAgdHJhbnNwYXJlbnQgdmFyKC0tcHJvZ3Jlc3MpXG4gICAgKTtcbiAgICBmb250LXNpemU6IDAuNXJlbTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBncmlkLWFyZWE6IHByb2dyZXNzO1xuICB9XG5gO1xuZG9jdW1lbnQuaGVhZC5hcHBlbmQoc3R5bGVMb2FkaW5nKTtcbmRvY3VtZW50LmJvZHkucHJlcGVuZChkb21Mb2FkaW5nKTtcblxuYXN5bmMgZnVuY3Rpb24gb25Mb2FkKCkge1xuICBsb2dnZXIubG9nKCdMb2FkaW5nIG1vZHVsZXMnKTtcbiAgYXdhaXQgbG9hZE5leHRNb2R1bGUoKTtcbiAgbG9nZ2VyLmluZm8oJ0xvYWRlZCBhbGwgbW9kdWxlcycpO1xuICBzZXRMb2FkaW5nTWVzc2FnZSgnTG9hZGVkIGFsbCBtb2R1bGVzJywgMSk7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGRvbUxvYWRpbmcucmVtb3ZlKCk7XG4gICAgc3R5bGVMb2FkaW5nLnJlbW92ZSgpO1xuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnbG9hZHNjcmlwdCcpKTtcbiAgfSwgMTAwMCk7XG59XG5cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gIG9uTG9hZCgpO1xufSBlbHNlIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkxvYWQpO1xufVxuIl0sIm5hbWVzIjpbIkxvZ2dlciIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsIndhcm4iLCJpbmZvIiwiZXJyb3IiLCJ0cmFjZSIsImdyb3VwIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsImNvbnN0cnVjdG9yIiwidGFnIiwiYmluZGVyIiwicHVzaCIsInRvU3RyaW5nIiwidGhpcyIsImJpbmQiLCJnbG9iYWxUaGlzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXN5bmMiLCJzcmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWFkeVN0YXRlIiwid2luZG93Iiwib25jZSIsIndhaXRGb3JQYWdlTG9hZGVkIiwiaGVhZCIsImFwcGVuZCIsImxvZ2dlciIsImN1cnJlbnRTY3JpcHQiLCJzdHlsZUxvYWRpbmciLCJkb21Mb2FkaW5nIiwiaWRMb2FkaW5nIiwiRGF0ZSIsIm5vdyIsInNldExvYWRpbmdNZXNzYWdlIiwibWVzc2FnZSIsInByb2dyZXNzIiwic2V0QXR0cmlidXRlIiwicGVyY2VudGFnZSIsIk1hdGgiLCJyb3VuZCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJyb290UGF0aCIsImdldEF0dHJpYnV0ZSIsInJlcGxhY2UiLCJtb2R1bGVzIiwic3BsaXQiLCJtYXAiLCJzIiwidHJpbSIsImZpbHRlciIsImxlbmd0aCIsImxvYWROZXh0TW9kdWxlIiwiaW5kZXgiLCJyb290IiwiZGVmYXVsdFBhdGgiLCJsb2FkU2NyaXB0IiwiYmFja3VwUGF0aCIsImVyciIsIm9uTG9hZCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJpZCIsImlubmVyVGV4dCIsImJvZHkiLCJwcmVwZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==