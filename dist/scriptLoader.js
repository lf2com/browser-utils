(()=>{"use strict";var e={420:(e,n,o)=>{o.d(n,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const n=[];null!==e&&n.push(e.toString()),this.debug=console.debug.bind(console,...n),this.log=console.log.bind(console,...n),this.warn=console.warn.bind(console,...n),this.info=console.info.bind(console,...n),this.error=console.error.bind(console,...n),this.trace=console.trace.bind(console,...n),this.group=console.group.bind(console,...n),this.groupCollapsed=console.groupCollapsed.bind(console,...n)}}globalThis.Logger=t;const r=t}},n={};function o(t){var r=n[t];if(void 0!==r)return r.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,o),a.exports}o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=o(420);const n=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},t=async function(e,o=!1){return new Promise(((t,r)=>{const a=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,s=document.createElement("script");o?async function(e){const n=await fetch(e,{method:"GET"});if(!n.ok)throw new ReferenceError(n.statusText);return n.text()}(a).then((e=>{s.innerHTML=e,document.head.append(s)})).then(t).catch(r):(s.src=a,s.addEventListener("load",(async()=>{await n(),t()})),s.addEventListener("error",(()=>{s.remove(),r()})),document.head.append(s))}))},r=new e.Z("[SL]"),a=document.currentScript,s=a.getAttribute("src")?.replace(/\w+(\.\w+)?$/,""),i=a.getAttribute("event:load")??"scriptload",d=document.createElement("style"),l=document.createElement("div"),c=`loading_${Date.now()}`,p=(e,n)=>{if(l.setAttribute("data-message",e),n){const e=Math.round(100*n);l.style.setProperty("--progress",`${e}%`)}},g=(a.getAttribute("module")??"").split(/[|;,\s]/).map((e=>e.trim())).filter((e=>e.length>0)),u=async(e=0)=>{const n=g[e];if(n){const o=/^~/.test(n)?`${s}${n.replace(/^~\//,"")}`:n,a=`${o}.js`,i=(e+1)/g.length;r.log(`Loading script path: ${a}`),p(`Loading module: ${n}`,i);try{await t(a)}catch(e){const a=`${o}/index.js`;r.log(`Loading failed. Try to load script path: ${a}`);try{await t(a),r.info(`Loaded script: ${n}`)}catch(e){r.warn(`Loading failed. Script not found: ${n}`)}}finally{await u(e+1)}}};async function m(){r.log("Loading modules"),await u(),r.info("Loaded all modules"),p("Loaded all modules",1),setTimeout((()=>{l.remove(),d.remove(),window.dispatchEvent(new CustomEvent(i)),a.remove()}),1e3)}l.id=c,d.innerHTML=`\n  #${c} ~ * {\n    display: none;\n  }\n  #${c} {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    color: #333;\n    background-color: #fff;\n    font-size: 13px;\n    font-family: arial;\n    font-weight: normal;\n    line-height: 1.5em;\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto) 1fr;\n    grid-template-areas: 'head' 'message' 'progress' 'tail';\n    gap: 0.25em;\n    align-items: center;\n    justify-items: center;\n  }\n  #${c}::before {\n    content: attr(data-message);\n    display: block;\n    grid-area: message;\n  }\n  #${c}::after {\n    content: '';\n    width: 20vw;\n    height: 0.8em;\n    box-sizing: border-box;\n    border-radius: 0.5em;\n    border: 1px solid #666;\n    background-image: linear-gradient(90deg,\n      #6c6 var(--progress),\n      transparent var(--progress)\n    );\n    font-size: 0.5rem;\n    display: block;\n    grid-area: progress;\n  }\n`,document.head.append(d),n().then((()=>{document.body.prepend(l)})),"complete"===document.readyState?m():window.addEventListener("load",m),globalThis.loadScript=t})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,