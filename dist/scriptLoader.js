(()=>{"use strict";var e={420:(e,o,n)=>{n.d(o,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=t;const r=t}},o={};function n(t){var r=o[t];if(void 0!==r)return r.exports;var a=o[t]={exports:{}};return e[t](a,a.exports,n),a.exports}n.d=(e,o)=>{for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=n(420);const o=async function(e,o=!1){return new Promise(((n,t)=>{const r=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,a=document.createElement("script");console.log(`\`- source: ${e}`),console.log(`\`- src: ${r}`),o?async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()}(r).then((e=>{a.innerHTML=e,document.head.append(a)})).then(n).catch(t):(a.src=r,a.addEventListener("load",(async()=>{await async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))}(),n()})),a.addEventListener("error",(()=>{a.remove(),t()})),document.head.append(a))}))},t=new e.Z("[SL]"),r=document.currentScript,a=r.getAttribute("event:load")??"scriptload",s=document.createElement("style"),i=document.createElement("div"),d=`loading_${Date.now()}`,c=(e,o)=>{if(i.setAttribute("data-message",e),o){const e=Math.round(100*o);i.style.setProperty("--progress",`${e}%`)}},l=(r.getAttribute("module")??"").split(/[|;,\s]/).map((e=>e.trim())).filter((e=>e.length>0)),g=async(e=0)=>{const n=l[e];if(n){const r=n,a=`${r}.js`,s=(e+1)/l.length;t.log(`Loading script path: ${a}`),c(`Loading module: ${n}`,s);try{await o(a)}catch(e){const a=`${r}/index.js`;t.log(`Loading failed. Try to load script path: ${a}`);try{await o(a),t.info(`Loaded script: ${n}`)}catch(e){t.warn(`Loading failed. Script not found: ${n}`)}}finally{await g(e+1)}}};async function p(){t.log("Loading modules"),await g(),t.info("Loaded all modules"),c("Loaded all modules",1),setTimeout((()=>{i.remove(),s.remove(),window.dispatchEvent(new CustomEvent(a))}),1e3)}i.id=d,s.innerHTML=`\n  #${d} ~ * {\n    display: none;\n  }\n  #${d} {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    color: #333;\n    background-color: #fff;\n    font-size: 13px;\n    font-family: arial;\n    font-weight: normal;\n    line-height: 1.5em;\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto) 1fr;\n    grid-template-areas: 'head' 'message' 'progress' 'tail';\n    gap: 0.25em;\n    align-items: center;\n    justify-items: center;\n  }\n  #${d}::before {\n    content: attr(data-message);\n    display: block;\n    grid-area: message;\n  }\n  #${d}::after {\n    content: '';\n    width: 20vw;\n    height: 0.8em;\n    box-sizing: border-box;\n    border-radius: 0.5em;\n    border: 1px solid #666;\n    background-image: linear-gradient(90deg,\n      #6c6 var(--progress),\n      transparent var(--progress)\n    );\n    font-size: 0.5rem;\n    display: block;\n    grid-area: progress;\n  }\n`,document.head.append(s),async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("DOMContentLoaded",(()=>{e(void 0)}),{once:!0})}))}().then((()=>{document.body.prepend(i)})),"complete"===document.readyState?p():window.addEventListener("load",p),globalThis.loadScript=o})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,