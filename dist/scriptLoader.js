(()=>{"use strict";var e={420:(e,n,o)=>{o.d(n,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const n=[];null!==e&&n.push(e.toString()),this.debug=console.debug.bind(console,...n),this.log=console.log.bind(console,...n),this.warn=console.warn.bind(console,...n),this.info=console.info.bind(console,...n),this.error=console.error.bind(console,...n),this.trace=console.trace.bind(console,...n),this.group=console.group.bind(console,...n),this.groupCollapsed=console.groupCollapsed.bind(console,...n)}}globalThis.Logger=t;const r=t}},n={};function o(t){var r=n[t];if(void 0!==r)return r.exports;var a=n[t]={exports:{}};return e[t](a,a.exports,o),a.exports}o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=o(420);const n=async function(e,n=!1){return new Promise(((o,t)=>{const r=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,a=document.createElement("script");n?async function(e){const n=await fetch(e,{method:"GET"});if(!n.ok)throw new ReferenceError(n.statusText);return n.text()}(r).then((e=>{a.innerHTML=e,document.head.append(a)})).then(o).catch(t):(a.src=r,a.addEventListener("load",(async()=>{await async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))}(),o()})),a.addEventListener("error",(()=>{a.remove(),t()})),document.head.append(a))}))},t=new e.Z("[SL]"),r=document.currentScript,a=r.getAttribute("src")?.replace(/\w+(\.\w+)?$/,""),s=r.getAttribute("event:load")??"scriptload",i=document.createElement("style"),d=document.createElement("div"),c=`loading_${Date.now()}`,l=(e,n)=>{if(d.setAttribute("data-message",e),n){const e=Math.round(100*n);d.style.setProperty("--progress",`${e}%`)}},p=(r.getAttribute("module")??"").split(/[|;,\s]/).map((e=>e.trim())).filter((e=>e.length>0)),g=async(e=0)=>{const o=p[e];if(o){const r=/^~/.test(o)?`${a}${o.replace(/^~\//,"")}`:o,s=`${r}.js`,i=(e+1)/p.length;t.log(`Loading script path: ${s}`),l(`Loading module: ${o}`,i);try{await n(s)}catch(e){const a=`${r}/index.js`;t.log(`Loading failed. Try to load script path: ${a}`);try{await n(a),t.info(`Loaded script: ${o}`)}catch(e){t.warn(`Loading failed. Script not found: ${o}`)}}finally{await g(e+1)}}};async function u(){t.log("Loading modules"),await g(),t.info("Loaded all modules"),l("Loaded all modules",1),setTimeout((()=>{d.remove(),i.remove(),window.dispatchEvent(new CustomEvent(s))}),1e3)}d.id=c,i.innerHTML=`\n  #${c} ~ * {\n    display: none;\n  }\n  #${c} {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    color: #333;\n    background-color: #fff;\n    font-size: 13px;\n    font-family: arial;\n    font-weight: normal;\n    line-height: 1.5em;\n    display: grid;\n    grid-template-rows: 1fr repeat(2, auto) 1fr;\n    grid-template-areas: 'head' 'message' 'progress' 'tail';\n    gap: 0.25em;\n    align-items: center;\n    justify-items: center;\n  }\n  #${c}::before {\n    content: attr(data-message);\n    display: block;\n    grid-area: message;\n  }\n  #${c}::after {\n    content: '';\n    width: 20vw;\n    height: 0.8em;\n    box-sizing: border-box;\n    border-radius: 0.5em;\n    border: 1px solid #666;\n    background-image: linear-gradient(90deg,\n      #6c6 var(--progress),\n      transparent var(--progress)\n    );\n    font-size: 0.5rem;\n    display: block;\n    grid-area: progress;\n  }\n`,document.head.append(i),async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("DOMContentLoaded",(()=>{e(void 0)}),{once:!0})}))}().then((()=>{document.body.prepend(d)})),"complete"===document.readyState?u():window.addEventListener("load",u),globalThis.loadScript=n})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,