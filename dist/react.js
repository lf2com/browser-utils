(()=>{"use strict";var e={420:(e,o,n)=>{n.d(o,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=t;const r=t}},o={};function n(t){var r=o[t];if(void 0!==r)return r.exports;var s=o[t]={exports:{}};return e[t](s,s.exports,n),s.exports}n.d=(e,o)=>{for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=n(420);const o=async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()},t=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},r=async function(e,n=!1){return new Promise(((r,s)=>{const c=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,a=document.createElement("script");n?o(c).then((e=>{a.innerHTML=e,document.head.append(a)})).then(r).catch(s):(a.src=c,a.addEventListener("load",(async()=>{await t(),r()})),a.addEventListener("error",(()=>{a.remove(),s()})),document.head.append(a))}))},s=new e.Z("[RJ]");s.log("Loading React"),r("https://unpkg.com/react@17/umd/react.production.min.js").then((()=>Promise.all([r("https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"),r("https://unpkg.com/@babel/standalone/babel.min.js")]))).then(t).then((async()=>{const{Babel:e}=window;if(!e)throw new ReferenceError("Babel is not defined");const{transform:n}=e;if(!n)throw new ReferenceError("Babel.transform is not defined");const t=async e=>{if(!(e instanceof HTMLScriptElement))return;if(!/^text\/babel$/.test(e.type))return;s.log("Transpiling react");const{src:t}=e,r=(t.length>0?await o(t):e.innerHTML).trim(),c=n(r,{presets:["env","react","typescript"],filename:".tsx"}).code,a=document.createElement("script");a.innerHTML=c,e.replaceWith(a),s.info("Transpiled")};s.info("Loaded React. Starting to transforming..."),await Array.from(document.querySelectorAll('script[type="text/babel"]')).reduce((async(e,o,n,r)=>{await e,s.log(`Transforming ${n+1} / ${r.length}`);try{t(o)}catch(e){const{message:o}=e;s.warn(`Transforming failed: ${o}`)}}),Promise.resolve()),s.info("Transformed all scripts"),new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{t(e)}))}))})).observe(document,{childList:!0,subtree:!0})})).catch((e=>{const o=e?.message??"Not found";s.warn(`Loading React failed: ${o}`)})).finally((()=>{s.log("End of React")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,