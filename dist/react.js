(()=>{"use strict";var e={420:(e,o,n)=>{n.d(o,{Z:()=>r});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=t;const r=t}},o={};function n(t){var r=o[t];if(void 0!==r)return r.exports;var s=o[t]={exports:{}};return e[t](s,s.exports,n),s.exports}n.d=(e,o)=>{for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=n(420);const o=async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()},t=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},r=async function(e,n=!1){return new Promise(((r,s)=>{const c=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,a=document.createElement("script");console.log(`\`- source: ${e}`),console.log(`\`- src: ${c}`),n?o(c).then((e=>{a.innerHTML=e,document.head.append(a)})).then(r).catch(s):(a.src=c,a.addEventListener("load",(async()=>{await t(),r()})),a.addEventListener("error",(()=>{a.remove(),s()})),document.head.append(a))}))},s=new e.Z("[RJ]");s.log("Loading React"),r("https://unpkg.com/react@17/umd/react.production.min.js").then((()=>Promise.all([r("https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"),r("https://unpkg.com/@babel/standalone/babel.min.js")]))).then(t).then((async()=>{const{Babel:e}=window;if(!e)throw new ReferenceError("Babel is not defined");const{transform:n}=e;if(!n)throw new ReferenceError("Babel.transform is not defined");const t=async e=>{if(!(e instanceof HTMLScriptElement))return;if(!/^text\/babel$/.test(e.type))return;s.log("Transpiling react");const{src:t}=e,r=(t.length>0?await o(t):e.innerHTML).trim(),c=n(r,{presets:["env","react","typescript"],filename:".tsx"}).code,a=document.createElement("script");a.innerHTML=c,e.replaceWith(a),s.info("Transpiled")};s.info("Loaded React. Starting to transforming..."),await Array.from(document.querySelectorAll('script[type="text/babel"]')).reduce((async(e,o,n,r)=>{await e,s.log(`Transforming ${n+1} / ${r.length}`);try{t(o)}catch(e){const{message:o}=e;s.warn(`Transforming failed: ${o}`)}}),Promise.resolve()),s.info("Transformed all scripts"),new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{t(e)}))}))})).observe(document,{childList:!0,subtree:!0})})).catch((e=>{const o=e?.message??"Not found";s.warn(`Loading React failed: ${o}`)})).finally((()=>{s.log("End of React")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVVDLFNBQVNDLElBQ2pCQSxFQUFTQyxXQUFXRixTQUFTRyxJQUMzQjFCLEVBQVEwQixZQUlYQyxRQUFRekQsU0FBVSxDQUNqQjBELFdBQVcsRUFDWEMsU0FBUyxPQUdkckMsT0FBT2pFLElBQ04sTUFBTXVHLEVBQVN2RyxHQUFPNkYsU0FBVyxZQUVqQ3pCLEVBQU90RSxLQUFNLHlCQUF3QnlHLFFBRXRDQyxTQUFRLEtBQ1BwQyxFQUFPdkUsSUFBSSxvQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BsZjJjb20vYnJvd3Nlci11dGlscy8uL3NyYy9Mb2dnZXIudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9icm93c2VyLXV0aWxzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0BsZjJjb20vYnJvd3Nlci11dGlscy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9icm93c2VyLXV0aWxzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9icm93c2VyLXV0aWxzLy4vc3JjL3V0aWxzL2ZldGNoVXJsVGV4dC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvLi9zcmMvdXRpbHMvd2FpdEZvclBhZ2VMb2FkZWQudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9icm93c2VyLXV0aWxzLy4vc3JjL3V0aWxzL2xvYWRTY3JpcHQudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9icm93c2VyLXV0aWxzLy4vc3JjL3JlYWN0L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmNsYXNzIExvZ2dlciB7XG4gIHJlYWRvbmx5IGRlYnVnOiB0eXBlb2YgY29uc29sZVsnZGVidWcnXSA9IGNvbnNvbGUuZGVidWc7XG5cbiAgcmVhZG9ubHkgbG9nOiB0eXBlb2YgY29uc29sZVsnbG9nJ10gPSBjb25zb2xlLmxvZztcblxuICByZWFkb25seSB3YXJuOiB0eXBlb2YgY29uc29sZVsnd2FybiddID0gY29uc29sZS53YXJuO1xuXG4gIHJlYWRvbmx5IGluZm86IHR5cGVvZiBjb25zb2xlWydpbmZvJ10gPSBjb25zb2xlLmluZm87XG5cbiAgcmVhZG9ubHkgZXJyb3I6IHR5cGVvZiBjb25zb2xlWydlcnJvciddID0gY29uc29sZS5lcnJvcjtcblxuICByZWFkb25seSB0cmFjZTogdHlwZW9mIGNvbnNvbGVbJ3RyYWNlJ10gPSBjb25zb2xlLnRyYWNlO1xuXG4gIHJlYWRvbmx5IGdyb3VwOiB0eXBlb2YgY29uc29sZVsnZ3JvdXAnXSA9IGNvbnNvbGUuZ3JvdXA7XG5cbiAgcmVhZG9ubHkgZ3JvdXBDb2xsYXBzZWQ6IHR5cGVvZiBjb25zb2xlWydncm91cENvbGxhcHNlZCddID0gY29uc29sZS5ncm91cENvbGxhcHNlZDtcblxuICByZWFkb25seSBncm91cEVuZDogdHlwZW9mIGNvbnNvbGVbJ2dyb3VwRW5kJ10gPSBjb25zb2xlLmdyb3VwRW5kO1xuXG4gIGNvbnN0cnVjdG9yKHRhZzogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBjb25zdCBiaW5kZXI6IGFueVtdID0gW107XG5cbiAgICBpZiAodGFnICE9PSBudWxsKSB7XG4gICAgICBiaW5kZXIucHVzaCh0YWcudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1ZyA9IGNvbnNvbGUuZGVidWcuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMubG9nID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMud2FybiA9IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gICAgdGhpcy5pbmZvID0gY29uc29sZS5pbmZvLmJpbmQoY29uc29sZSwgLi4uYmluZGVyKTtcbiAgICB0aGlzLmVycm9yID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gICAgdGhpcy50cmFjZSA9IGNvbnNvbGUudHJhY2UuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMuZ3JvdXAgPSBjb25zb2xlLmdyb3VwLmJpbmQoY29uc29sZSwgLi4uYmluZGVyKTtcbiAgICB0aGlzLmdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZC5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gIH1cbn1cblxuKGdsb2JhbFRoaXMgYXMgYW55KS5Mb2dnZXIgPSBMb2dnZXI7XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2dlcjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLyoqXG4gKiBSZXR1cm5zIHRleHQgb2YgVVJMLlxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFVybFRleHQodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gIH0pO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmZXRjaFVybFRleHQ7XG4iLCIvKipcbiAqIFdhaXRzIHVudGlsIHBhZ2UgaXMgbG9hZGVkLlxuICovXG5hc3luYyBmdW5jdGlvbiB3YWl0Rm9yUGFnZUxvYWRlZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2xvYWQnLFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICB9LFxuICAgICAgeyBvbmNlOiB0cnVlIH0sXG4gICAgKTtcbiAgfSk7XG59XG4vKipcbiAqIFdhaXRzIHVudGlsIERPTSBjb250ZW50IGlzIGxvYWRlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JET01Db250ZW50TG9hZGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnRE9NQ29udGVudExvYWRlZCcsXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgIH0sXG4gICAgICB7IG9uY2U6IHRydWUgfSxcbiAgICApO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2FpdEZvclBhZ2VMb2FkZWQ7XG4iLCJpbXBvcnQgZmV0Y2hVcmxUZXh0IGZyb20gJy4vZmV0Y2hVcmxUZXh0JztcbmltcG9ydCB3YWl0Rm9yUGFnZUxvYWRlZCBmcm9tICcuL3dhaXRGb3JQYWdlTG9hZGVkJztcblxuLyoqXG4gKiBMb2FkcyBzY3JpcHQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRTY3JpcHQoc291cmNlOiBzdHJpbmcsIGxvYWRSYXdUZXh0ID0gZmFsc2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBzcmMgPSAoL15cXC4vLnRlc3Qoc291cmNlKVxuICAgICAgPyBgJHtnbG9iYWxUaGlzLmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvXFx3KyhcXC5cXHcrKT8kLywgJycpfSR7c291cmNlfWBcbiAgICAgIDogc291cmNlXG4gICAgKTtcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBjb25zb2xlLmxvZyhgXFxgLSBzb3VyY2U6ICR7c291cmNlfWApO1xuICAgIGNvbnNvbGUubG9nKGBcXGAtIHNyYzogJHtzcmN9YCk7XG5cbiAgICBpZiAobG9hZFJhd1RleHQpIHtcbiAgICAgIGZldGNoVXJsVGV4dChzcmMpXG4gICAgICAgIC50aGVuKCh0ZXh0KSA9PiB7XG4gICAgICAgICAgc2NyaXB0LmlubmVySFRNTCA9IHRleHQ7XG4gICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmQoc2NyaXB0KTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcmlwdC5zcmMgPSBzcmM7XG4gICAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgd2FpdEZvclBhZ2VMb2FkZWQoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgIHNjcmlwdC5yZW1vdmUoKTtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kKHNjcmlwdCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9hZFNjcmlwdDtcbiIsImltcG9ydCBMb2dnZXIgZnJvbSAnLi4vTG9nZ2VyJztcbmltcG9ydCBmZXRjaFVybFRleHQgZnJvbSAnLi4vdXRpbHMvZmV0Y2hVcmxUZXh0JztcbmltcG9ydCBsb2FkU2NyaXB0IGZyb20gJy4uL3V0aWxzL2xvYWRTY3JpcHQnO1xuaW1wb3J0IHdhaXRGb3JQYWdlTG9hZGVkIGZyb20gJy4uL3V0aWxzL3dhaXRGb3JQYWdlTG9hZGVkJztcblxuY29uc3QgcmVhY3RQYXRoID0gJ2h0dHBzOi8vdW5wa2cuY29tL3JlYWN0QDE3L3VtZC9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyc7XG5jb25zdCByZWFjdERvbVBhdGggPSAnaHR0cHM6Ly91bnBrZy5jb20vcmVhY3QtZG9tQDE3L3VtZC9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnO1xuY29uc3QgYmFiZWxQYXRoID0gJ2h0dHBzOi8vdW5wa2cuY29tL0BiYWJlbC9zdGFuZGFsb25lL2JhYmVsLm1pbi5qcyc7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdbUkpdJyk7XG5cbmxvZ2dlci5sb2coJ0xvYWRpbmcgUmVhY3QnKTtcbmxvYWRTY3JpcHQocmVhY3RQYXRoKVxuICAudGhlbigoKSA9PiBQcm9taXNlLmFsbChbXG4gICAgbG9hZFNjcmlwdChyZWFjdERvbVBhdGgpLFxuICAgIGxvYWRTY3JpcHQoYmFiZWxQYXRoKSxcbiAgXSkpXG4gIC50aGVuKHdhaXRGb3JQYWdlTG9hZGVkKVxuICAudGhlbihhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBCYWJlbCB9ID0gd2luZG93IGFzIGFueTtcblxuICAgIGlmICghQmFiZWwpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignQmFiZWwgaXMgbm90IGRlZmluZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHRyYW5zZm9ybSB9ID0gQmFiZWw7XG5cbiAgICBpZiAoIXRyYW5zZm9ybSkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCdCYWJlbC50cmFuc2Zvcm0gaXMgbm90IGRlZmluZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBkb1JlYWN0ID0gYXN5bmMgKHJlYWN0U2NyaXB0OiBFbGVtZW50KSA9PiB7XG4gICAgICBpZiAoIShyZWFjdFNjcmlwdCBpbnN0YW5jZW9mIEhUTUxTY3JpcHRFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIS9edGV4dFxcL2JhYmVsJC8udGVzdChyZWFjdFNjcmlwdC50eXBlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlci5sb2coJ1RyYW5zcGlsaW5nIHJlYWN0Jyk7XG5cbiAgICAgIGNvbnN0IHsgc3JjIH0gPSByZWFjdFNjcmlwdDtcbiAgICAgIGNvbnN0IHJlYWN0VGV4dCA9IChzcmMubGVuZ3RoID4gMFxuICAgICAgICA/IGF3YWl0IGZldGNoVXJsVGV4dChzcmMpXG4gICAgICAgIDogcmVhY3RTY3JpcHQuaW5uZXJIVE1MXG4gICAgICApXG4gICAgICAgIC50cmltKCk7XG4gICAgICBjb25zdCBqc1RleHQgPSB0cmFuc2Zvcm0ocmVhY3RUZXh0LCB7XG4gICAgICAgIHByZXNldHM6IFsnZW52JywgJ3JlYWN0JywgJ3R5cGVzY3JpcHQnXSxcbiAgICAgICAgZmlsZW5hbWU6ICcudHN4JyxcbiAgICAgIH0pLmNvZGU7XG4gICAgICBjb25zdCBqc1NjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgICBqc1NjcmlwdC5pbm5lckhUTUwgPSBqc1RleHQ7XG4gICAgICByZWFjdFNjcmlwdC5yZXBsYWNlV2l0aChqc1NjcmlwdCk7XG4gICAgICBsb2dnZXIuaW5mbygnVHJhbnNwaWxlZCcpO1xuICAgIH07XG5cbiAgICBsb2dnZXIuaW5mbygnTG9hZGVkIFJlYWN0LiBTdGFydGluZyB0byB0cmFuc2Zvcm1pbmcuLi4nKTtcblxuICAgIGF3YWl0IChcbiAgICAgIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0W3R5cGU9XCJ0ZXh0L2JhYmVsXCJdJykpIGFzIEhUTUxTY3JpcHRFbGVtZW50W11cbiAgICApXG4gICAgICAucmVkdWNlKGFzeW5jIChwcmV2UHJvbWlzZSwgcmVhY3RTY3JpcHQsIHJlYWN0SW5kZXgsIHJlYWN0U2NyaXB0cykgPT4ge1xuICAgICAgICBhd2FpdCBwcmV2UHJvbWlzZTtcbiAgICAgICAgbG9nZ2VyLmxvZyhgVHJhbnNmb3JtaW5nICR7cmVhY3RJbmRleCArIDF9IC8gJHtyZWFjdFNjcmlwdHMubGVuZ3RofWApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZG9SZWFjdChyZWFjdFNjcmlwdCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc3QgeyBtZXNzYWdlIH0gPSBlcnJvciBhcyBFcnJvcjtcblxuICAgICAgICAgIGxvZ2dlci53YXJuKGBUcmFuc2Zvcm1pbmcgZmFpbGVkOiAke21lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICBsb2dnZXIuaW5mbygnVHJhbnNmb3JtZWQgYWxsIHNjcmlwdHMnKTtcblxuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICBkb1JlYWN0KG5vZGUgYXMgRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSlcbiAgICAgIC5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgIH0pO1xuICB9KVxuICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgY29uc3QgZGV0YWlsID0gZXJyb3I/Lm1lc3NhZ2UgPz8gJ05vdCBmb3VuZCc7XG5cbiAgICBsb2dnZXIud2FybihgTG9hZGluZyBSZWFjdCBmYWlsZWQ6ICR7ZGV0YWlsfWApO1xuICB9KVxuICAuZmluYWxseSgoKSA9PiB7XG4gICAgbG9nZ2VyLmxvZygnRW5kIG9mIFJlYWN0Jyk7XG4gIH0pO1xuIl0sIm5hbWVzIjpbIkxvZ2dlciIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsIndhcm4iLCJpbmZvIiwiZXJyb3IiLCJ0cmFjZSIsImdyb3VwIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsImNvbnN0cnVjdG9yIiwidGFnIiwiYmluZGVyIiwicHVzaCIsInRvU3RyaW5nIiwidGhpcyIsImJpbmQiLCJnbG9iYWxUaGlzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXN5bmMiLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwib2siLCJSZWZlcmVuY2VFcnJvciIsInN0YXR1c1RleHQiLCJ0ZXh0IiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsInNvdXJjZSIsImxvYWRSYXdUZXh0IiwicmVqZWN0Iiwic3JjIiwidGVzdCIsImxvY2F0aW9uIiwiaHJlZiIsInJlcGxhY2UiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiZmV0Y2hVcmxUZXh0IiwidGhlbiIsImlubmVySFRNTCIsImhlYWQiLCJhcHBlbmQiLCJjYXRjaCIsIndhaXRGb3JQYWdlTG9hZGVkIiwicmVtb3ZlIiwibG9nZ2VyIiwibG9hZFNjcmlwdCIsImFsbCIsIkJhYmVsIiwidHJhbnNmb3JtIiwiZG9SZWFjdCIsInJlYWN0U2NyaXB0IiwiSFRNTFNjcmlwdEVsZW1lbnQiLCJ0eXBlIiwicmVhY3RUZXh0IiwibGVuZ3RoIiwidHJpbSIsImpzVGV4dCIsInByZXNldHMiLCJmaWxlbmFtZSIsImNvZGUiLCJqc1NjcmlwdCIsInJlcGxhY2VXaXRoIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsInJlZHVjZSIsInByZXZQcm9taXNlIiwicmVhY3RJbmRleCIsInJlYWN0U2NyaXB0cyIsIm1lc3NhZ2UiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwiZm9yRWFjaCIsIm11dGF0aW9uIiwiYWRkZWROb2RlcyIsIm5vZGUiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImRldGFpbCIsImZpbmFsbHkiXSwic291cmNlUm9vdCI6IiJ9