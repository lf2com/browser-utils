(()=>{"use strict";var e={420:(e,o,t)=>{t.d(o,{Z:()=>s});class n{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=n;const s=n}},o={};function t(n){var s=o[n];if(void 0!==s)return s.exports;var r=o[n]={exports:{}};return e[n](r,r.exports,t),r.exports}t.d=(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=t(420);const o=async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()},n=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},s="https://cdn.jsdelivr.net/gh/medialize/sass.js@latest/dist/sass.sync.js",r=new e.Z("[SS]");r.log(`Loading Sass: ${s}`),async function(e,t=!1){return new Promise(((s,r)=>{const c=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,i=document.createElement("script");t?o(c).then((e=>{i.innerHTML=e,document.head.append(i)})).then(s).catch(r):(i.src=c,i.addEventListener("load",(async()=>{await n(),s()})),i.addEventListener("error",(()=>{i.remove(),r()})),document.head.append(i))}))}(s).then(n).then((async()=>{const{Sass:e}=window;if(!e)throw new ReferenceError("Sass is not defined");const{compile:t}=e;if(!t)throw new ReferenceError("sass.compile is not defined");const n=async e=>{if(!(e instanceof HTMLStyleElement||e instanceof HTMLLinkElement))return;if(!/^text\/scss$/.test(e.getAttribute("type"))&&!/\.scss$/i.test(e.getAttribute("href")))return;r.log("Compiling scss");const n=(e instanceof HTMLStyleElement?e.innerHTML:await o(e.getAttribute("href"))).trim();n.length>0&&await new Promise((o=>{t(n,(t=>{const{status:n}=t;if(0!==n){const{column:e,line:o,message:n}=t;throw new Error(`${n} @${o}:${e}`)}const{text:s}=t,r=document.createElement("style");r.innerHTML=s,e.replaceWith(r),o()}))})),r.info("Compiled")};r.info("Loaded Sass. Starting to compile..."),await Array.from(document.getElementsByTagName("style")).filter((e=>/^text\/scss$/.test(e.getAttribute("type")))).concat(Array.from(document.getElementsByTagName("link")).filter((e=>/\.scss$/i.test(e.href)))).reduce((async(e,o,t,s)=>{await e;try{r.log(`Compiling ${t+1} / ${s.length}`),n(o)}catch(e){const{message:o}=e;r.warn(`Compiling failed: ${o}`)}}),Promise.resolve()),r.info("Compiled all styles"),new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{n(e)}))}))})).observe(document,{childList:!0,subtree:!0})})).catch((e=>{const o=e?.message??"Not found";r.warn(`Loading Sass failed: ${o}`)})).finally((()=>{r.log("End of Sass")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,