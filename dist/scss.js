(()=>{"use strict";var e={420:(e,o,n)=>{n.d(o,{Z:()=>s});class t{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=t;const s=t}},o={};function n(t){var s=o[t];if(void 0!==s)return s.exports;var r=o[t]={exports:{}};return e[t](r,r.exports,n),r.exports}n.d=(e,o)=>{for(var t in o)n.o(o,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:o[t]})},n.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=n(420);const o=async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()},t=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},s="https://cdn.jsdelivr.net/gh/medialize/sass.js@latest/dist/sass.sync.js",r=new e.Z("[SS]");r.log(`Loading Sass: ${s}`),async function(e,n=!1){return new Promise(((s,r)=>{const c=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,i=document.createElement("script");n?o(c).then((e=>{i.innerHTML=e,document.head.append(i)})).then(s).catch(r):(i.src=c,i.addEventListener("load",(async()=>{await t(),s()})),i.addEventListener("error",(()=>{i.remove(),r()})),document.head.append(i))}))}(s).then(t).then((async()=>{const{Sass:e}=window;if(!e)throw new ReferenceError("Sass is not defined");const{compile:n}=e;if(!n)throw new ReferenceError("sass.compile is not defined");const t=e=>{if(e instanceof HTMLLinkElement)return/\.scss$/i.test(e.href);if(e instanceof HTMLStyleElement){const o=e.getAttribute("type")??"";return/^text\/scss$/.test(o)}return!1},s=async e=>{if(!t(e))return;r.log("Compiling scss");const s=(e instanceof HTMLStyleElement?e.innerHTML:await o(e.getAttribute("href"))).trim();s.length>0&&await new Promise((o=>{n(s,(n=>{const{status:t}=n;if(0!==t){const{column:e,line:o,message:t}=n;throw new Error(`${t} @${o}:${e}`)}const{text:s}=n,r=document.createElement("style");r.innerHTML=s,e.replaceWith(r),o()}))})),r.info("Compiled")};r.info("Loaded Sass. Starting to compile..."),await Array.from(document.getElementsByTagName("style")).filter((e=>t(e))).concat(Array.from(document.getElementsByTagName("link")).filter((e=>/\.scss$/i.test(e.href)))).reduce((async(e,o,n,t)=>{await e;try{r.log(`Compiling ${n+1} / ${t.length}`),s(o)}catch(e){const{message:o}=e;r.warn(`Compiling failed: ${o}`)}}),Promise.resolve()),r.info("Compiled all styles"),new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{s(e)}))}))})).observe(document,{childList:!0,subtree:!0})})).catch((e=>{const o=e?.message??"Not found";r.warn(`Loading Sass failed: ${o}`)})).finally((()=>{r.log("End of Sass")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,