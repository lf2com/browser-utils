(()=>{"use strict";var e={420:(e,o,t)=>{t.d(o,{Z:()=>s});class n{debug=console.debug;log=console.log;warn=console.warn;info=console.info;error=console.error;trace=console.trace;group=console.group;groupCollapsed=console.groupCollapsed;groupEnd=console.groupEnd;constructor(e=null){const o=[];null!==e&&o.push(e.toString()),this.debug=console.debug.bind(console,...o),this.log=console.log.bind(console,...o),this.warn=console.warn.bind(console,...o),this.info=console.info.bind(console,...o),this.error=console.error.bind(console,...o),this.trace=console.trace.bind(console,...o),this.group=console.group.bind(console,...o),this.groupCollapsed=console.groupCollapsed.bind(console,...o)}}globalThis.Logger=n;const s=n}},o={};function t(n){var s=o[n];if(void 0!==s)return s.exports;var r=o[n]={exports:{}};return e[n](r,r.exports,t),r.exports}t.d=(e,o)=>{for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e=t(420);const o=async function(e){const o=await fetch(e,{method:"GET"});if(!o.ok)throw new ReferenceError(o.statusText);return o.text()},n=async function(){"complete"!==document.readyState&&await new Promise((e=>{window.addEventListener("load",(()=>{e(void 0)}),{once:!0})}))},s="https://cdn.jsdelivr.net/gh/medialize/sass.js@latest/dist/sass.sync.js",r=new e.Z("[SS]");r.log(`Loading Sass: ${s}`),async function(e,t=!1){return new Promise(((s,r)=>{const c=/^\./.test(e)?`${globalThis.location.href.replace(/\w+(\.\w+)?$/,"")}${e}`:e,i=document.createElement("script");console.log(`\`- source: ${e}`),console.log(`\`- src: ${c}`),t?o(c).then((e=>{i.innerHTML=e,document.head.append(i)})).then(s).catch(r):(i.src=c,i.addEventListener("load",(async()=>{await n(),s()})),i.addEventListener("error",(()=>{i.remove(),r()})),document.head.append(i))}))}(s).then(n).then((async()=>{const{Sass:e}=window;if(!e)throw new ReferenceError("Sass is not defined");const{compile:t}=e;if(!t)throw new ReferenceError("sass.compile is not defined");const n=async e=>{if(!(e instanceof HTMLStyleElement||e instanceof HTMLLinkElement))return;if(!/^text\/scss$/.test(e.getAttribute("type"))&&!/\.scss$/i.test(e.getAttribute("href")))return;r.log("Compiling scss");const n=(e instanceof HTMLStyleElement?e.innerHTML:await o(e.getAttribute("href"))).trim();n.length>0&&await new Promise((o=>{t(n,(t=>{const{status:n}=t;if(0!==n){const{column:e,line:o,message:n}=t;throw new Error(`${n} @${o}:${e}`)}const{text:s}=t,r=document.createElement("style");r.innerHTML=s,e.replaceWith(r),o()}))})),r.info("Compiled")};r.info("Loaded Sass. Starting to compile..."),await Array.from(document.getElementsByTagName("style")).filter((e=>/^text\/scss$/.test(e.getAttribute("type")))).concat(Array.from(document.getElementsByTagName("link")).filter((e=>/\.scss$/i.test(e.href)))).reduce((async(e,o,t,s)=>{await e;try{r.log(`Compiling ${t+1} / ${s.length}`),n(o)}catch(e){const{message:o}=e;r.warn(`Compiling failed: ${o}`)}}),Promise.resolve()),r.info("Compiled all styles"),new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.forEach((e=>{n(e)}))}))})).observe(document,{childList:!0,subtree:!0})})).catch((e=>{const o=e?.message??"Not found";r.warn(`Loading Sass failed: ${o}`)})).finally((()=>{r.log("End of Sass")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxHQUFTLFdBQVd0QyxLQUFLc0MsRUFBS3BDLFNBRTFDcUMsUUFBTzdELE1BQU84RCxFQUFhdEIsRUFBU3VCLEVBQWNDLFdBQzNDRixFQUVOLElBQ0U3QyxFQUFPdEQsSUFBSyxhQUFZb0csRUFBZSxPQUFPQyxFQUFTbEIsVUFDdkRQLEVBQU9DLEdBQ1AsTUFBTzFFLEdBQ1AsTUFBTSxRQUFFcUYsR0FBWXJGLEVBRXBCbUQsRUFBT3JELEtBQU0scUJBQW9CdUYsUUFFbEN4QyxRQUFRQyxXQUNiSyxFQUFPcEQsS0FBSyx1QkFFWixJQUFJb0csa0JBQWtCQyxJQUNwQkEsRUFBVUMsU0FBU0MsSUFDakJBLEVBQVNDLFdBQVdGLFNBQVNHLElBQzNCL0IsRUFBTytCLFlBSVZDLFFBQVE5RCxTQUFVLENBQ2pCK0QsV0FBVyxFQUNYQyxTQUFTLE9BR2R4QyxPQUFPbkUsSUFDTixNQUFNNEcsRUFBUzVHLEdBQU9xRixTQUFXLFlBRWpDbEMsRUFBT3JELEtBQU0sd0JBQXVCOEcsUUFFckNDLFNBQVEsS0FDUDFELEVBQU90RCxJQUFJLG1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGxmMmNvbS9icm93c2VyLXV0aWxzLy4vc3JjL0xvZ2dlci50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9icm93c2VyLXV0aWxzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvLi9zcmMvdXRpbHMvZmV0Y2hVcmxUZXh0LnRzIiwid2VicGFjazovL0BsZjJjb20vYnJvd3Nlci11dGlscy8uL3NyYy91dGlscy93YWl0Rm9yUGFnZUxvYWRlZC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvLi9zcmMvc2Nzcy9pbmRleC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2Jyb3dzZXItdXRpbHMvLi9zcmMvdXRpbHMvbG9hZFNjcmlwdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5jbGFzcyBMb2dnZXIge1xuICByZWFkb25seSBkZWJ1ZzogdHlwZW9mIGNvbnNvbGVbJ2RlYnVnJ10gPSBjb25zb2xlLmRlYnVnO1xuXG4gIHJlYWRvbmx5IGxvZzogdHlwZW9mIGNvbnNvbGVbJ2xvZyddID0gY29uc29sZS5sb2c7XG5cbiAgcmVhZG9ubHkgd2FybjogdHlwZW9mIGNvbnNvbGVbJ3dhcm4nXSA9IGNvbnNvbGUud2FybjtcblxuICByZWFkb25seSBpbmZvOiB0eXBlb2YgY29uc29sZVsnaW5mbyddID0gY29uc29sZS5pbmZvO1xuXG4gIHJlYWRvbmx5IGVycm9yOiB0eXBlb2YgY29uc29sZVsnZXJyb3InXSA9IGNvbnNvbGUuZXJyb3I7XG5cbiAgcmVhZG9ubHkgdHJhY2U6IHR5cGVvZiBjb25zb2xlWyd0cmFjZSddID0gY29uc29sZS50cmFjZTtcblxuICByZWFkb25seSBncm91cDogdHlwZW9mIGNvbnNvbGVbJ2dyb3VwJ10gPSBjb25zb2xlLmdyb3VwO1xuXG4gIHJlYWRvbmx5IGdyb3VwQ29sbGFwc2VkOiB0eXBlb2YgY29uc29sZVsnZ3JvdXBDb2xsYXBzZWQnXSA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQ7XG5cbiAgcmVhZG9ubHkgZ3JvdXBFbmQ6IHR5cGVvZiBjb25zb2xlWydncm91cEVuZCddID0gY29uc29sZS5ncm91cEVuZDtcblxuICBjb25zdHJ1Y3Rvcih0YWc6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XG4gICAgY29uc3QgYmluZGVyOiBhbnlbXSA9IFtdO1xuXG4gICAgaWYgKHRhZyAhPT0gbnVsbCkge1xuICAgICAgYmluZGVyLnB1c2godGFnLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIHRoaXMuZGVidWcgPSBjb25zb2xlLmRlYnVnLmJpbmQoY29uc29sZSwgLi4uYmluZGVyKTtcbiAgICB0aGlzLmxvZyA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSwgLi4uYmluZGVyKTtcbiAgICB0aGlzLndhcm4gPSBjb25zb2xlLndhcm4uYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMuaW5mbyA9IGNvbnNvbGUuaW5mby5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gICAgdGhpcy5lcnJvciA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICAgIHRoaXMudHJhY2UgPSBjb25zb2xlLnRyYWNlLmJpbmQoY29uc29sZSwgLi4uYmluZGVyKTtcbiAgICB0aGlzLmdyb3VwID0gY29uc29sZS5ncm91cC5iaW5kKGNvbnNvbGUsIC4uLmJpbmRlcik7XG4gICAgdGhpcy5ncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQuYmluZChjb25zb2xlLCAuLi5iaW5kZXIpO1xuICB9XG59XG5cbihnbG9iYWxUaGlzIGFzIGFueSkuTG9nZ2VyID0gTG9nZ2VyO1xuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXI7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8qKlxuICogUmV0dXJucyB0ZXh0IG9mIFVSTC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hVcmxUZXh0KHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICB9KTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmV0Y2hVcmxUZXh0O1xuIiwiLyoqXG4gKiBXYWl0cyB1bnRpbCBwYWdlIGlzIGxvYWRlZC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gd2FpdEZvclBhZ2VMb2FkZWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdsb2FkJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfSxcbiAgICAgIHsgb25jZTogdHJ1ZSB9LFxuICAgICk7XG4gIH0pO1xufVxuLyoqXG4gKiBXYWl0cyB1bnRpbCBET00gY29udGVudCBpcyBsb2FkZWQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yRE9NQ29udGVudExvYWRlZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICB9LFxuICAgICAgeyBvbmNlOiB0cnVlIH0sXG4gICAgKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdhaXRGb3JQYWdlTG9hZGVkO1xuIiwiaW1wb3J0IExvZ2dlciBmcm9tICcuLi9Mb2dnZXInO1xuaW1wb3J0IGZldGNoVXJsVGV4dCBmcm9tICcuLi91dGlscy9mZXRjaFVybFRleHQnO1xuaW1wb3J0IGxvYWRTY3JpcHQgZnJvbSAnLi4vdXRpbHMvbG9hZFNjcmlwdCc7XG5pbXBvcnQgd2FpdEZvclBhZ2VMb2FkZWQgZnJvbSAnLi4vdXRpbHMvd2FpdEZvclBhZ2VMb2FkZWQnO1xuXG5jb25zdCBzYXNzUGF0aCA9ICdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvbWVkaWFsaXplL3Nhc3MuanNAbGF0ZXN0L2Rpc3Qvc2Fzcy5zeW5jLmpzJztcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ1tTU10nKTtcblxubG9nZ2VyLmxvZyhgTG9hZGluZyBTYXNzOiAke3Nhc3NQYXRofWApO1xubG9hZFNjcmlwdChzYXNzUGF0aClcbiAgLnRoZW4od2FpdEZvclBhZ2VMb2FkZWQpXG4gIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IFNhc3MgfSA9IHdpbmRvdyBhcyBhbnk7XG5cbiAgICBpZiAoIVNhc3MpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignU2FzcyBpcyBub3QgZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY29tcGlsZSB9ID0gU2FzcztcblxuICAgIGlmICghY29tcGlsZSkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCdzYXNzLmNvbXBpbGUgaXMgbm90IGRlZmluZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBkb1Njc3MgPSBhc3luYyAoc2Nzc0RvbTogRWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgaXNWYWxpZE5vZGUgPSAoXG4gICAgICAgIHNjc3NEb20gaW5zdGFuY2VvZiBIVE1MU3R5bGVFbGVtZW50XG4gICAgICAgIHx8IHNjc3NEb20gaW5zdGFuY2VvZiBIVE1MTGlua0VsZW1lbnRcbiAgICAgICk7XG5cbiAgICAgIGlmICghaXNWYWxpZE5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAhL150ZXh0XFwvc2NzcyQvLnRlc3Qoc2Nzc0RvbS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSBhcyBzdHJpbmcpXG4gICAgICAgICYmICEvXFwuc2NzcyQvaS50ZXN0KHNjc3NEb20uZ2V0QXR0cmlidXRlKCdocmVmJykgYXMgc3RyaW5nKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbG9nZ2VyLmxvZygnQ29tcGlsaW5nIHNjc3MnKTtcblxuICAgICAgY29uc3Qgc2Nzc1RleHQgPSAoc2Nzc0RvbSBpbnN0YW5jZW9mIEhUTUxTdHlsZUVsZW1lbnRcbiAgICAgICAgPyBzY3NzRG9tLmlubmVySFRNTFxuICAgICAgICA6IGF3YWl0IGZldGNoVXJsVGV4dChzY3NzRG9tLmdldEF0dHJpYnV0ZSgnaHJlZicpIGFzIHN0cmluZylcbiAgICAgIClcbiAgICAgICAgLnRyaW0oKTtcblxuICAgICAgaWYgKHNjc3NUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICBjb21waWxlKHNjc3NUZXh0LCAocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSByZXN1bHQ7XG5cbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgeyBjb2x1bW4sIGxpbmUsIG1lc3NhZ2UgfSA9IHJlc3VsdDtcblxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWVzc2FnZX0gQCR7bGluZX06JHtjb2x1bW59YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHsgdGV4dCB9ID0gcmVzdWx0O1xuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgICAgICAgICBzdHlsZS5pbm5lckhUTUwgPSB0ZXh0O1xuICAgICAgICAgICAgc2Nzc0RvbS5yZXBsYWNlV2l0aChzdHlsZSk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBsb2dnZXIuaW5mbygnQ29tcGlsZWQnKTtcbiAgICB9O1xuXG4gICAgbG9nZ2VyLmluZm8oJ0xvYWRlZCBTYXNzLiBTdGFydGluZyB0byBjb21waWxlLi4uJyk7XG5cbiAgICBhd2FpdCAoQXJyYXkuZnJvbShkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKSlcbiAgICAgIC5maWx0ZXIoKHN0eWxlKSA9PiAoXG4gICAgICAgIC9edGV4dFxcL3Njc3MkLy50ZXN0KHN0eWxlLmdldEF0dHJpYnV0ZSgndHlwZScpIGFzIHN0cmluZylcbiAgICAgICkpXG4gICAgICAuY29uY2F0KFxuICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsaW5rJykpXG4gICAgICAgICAgLmZpbHRlcigobGluaykgPT4gL1xcLnNjc3MkL2kudGVzdChsaW5rLmhyZWYpKSxcbiAgICAgICkgYXMgKEhUTUxTdHlsZUVsZW1lbnQgfCBIVE1MTGlua0VsZW1lbnQpW10pXG4gICAgICAucmVkdWNlKGFzeW5jIChwcmV2UHJvbWlzZSwgc2Nzc0RvbSwgc2Nzc0RvbUluZGV4LCBzY3NzRG9tcykgPT4ge1xuICAgICAgICBhd2FpdCBwcmV2UHJvbWlzZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGxvZ2dlci5sb2coYENvbXBpbGluZyAke3Njc3NEb21JbmRleCArIDF9IC8gJHtzY3NzRG9tcy5sZW5ndGh9YCk7XG4gICAgICAgICAgZG9TY3NzKHNjc3NEb20pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gZXJyb3IgYXMgRXJyb3I7XG5cbiAgICAgICAgICBsb2dnZXIud2FybihgQ29tcGlsaW5nIGZhaWxlZDogJHttZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgbG9nZ2VyLmluZm8oJ0NvbXBpbGVkIGFsbCBzdHlsZXMnKTtcblxuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICBkb1Njc3Mobm9kZSBhcyBFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgICAgLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgfSk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICBjb25zdCBkZXRhaWwgPSBlcnJvcj8ubWVzc2FnZSA/PyAnTm90IGZvdW5kJztcblxuICAgIGxvZ2dlci53YXJuKGBMb2FkaW5nIFNhc3MgZmFpbGVkOiAke2RldGFpbH1gKTtcbiAgfSlcbiAgLmZpbmFsbHkoKCkgPT4ge1xuICAgIGxvZ2dlci5sb2coJ0VuZCBvZiBTYXNzJyk7XG4gIH0pO1xuIiwiaW1wb3J0IGZldGNoVXJsVGV4dCBmcm9tICcuL2ZldGNoVXJsVGV4dCc7XG5pbXBvcnQgd2FpdEZvclBhZ2VMb2FkZWQgZnJvbSAnLi93YWl0Rm9yUGFnZUxvYWRlZCc7XG5cbi8qKlxuICogTG9hZHMgc2NyaXB0LlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkU2NyaXB0KHNvdXJjZTogc3RyaW5nLCBsb2FkUmF3VGV4dCA9IGZhbHNlKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc3JjID0gKC9eXFwuLy50ZXN0KHNvdXJjZSlcbiAgICAgID8gYCR7Z2xvYmFsVGhpcy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoL1xcdysoXFwuXFx3Kyk/JC8sICcnKX0ke3NvdXJjZX1gXG4gICAgICA6IHNvdXJjZVxuICAgICk7XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgY29uc29sZS5sb2coYFxcYC0gc291cmNlOiAke3NvdXJjZX1gKTtcbiAgICBjb25zb2xlLmxvZyhgXFxgLSBzcmM6ICR7c3JjfWApO1xuXG4gICAgaWYgKGxvYWRSYXdUZXh0KSB7XG4gICAgICBmZXRjaFVybFRleHQoc3JjKVxuICAgICAgICAudGhlbigodGV4dCkgPT4ge1xuICAgICAgICAgIHNjcmlwdC5pbm5lckhUTUwgPSB0ZXh0O1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kKHNjcmlwdCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKHJlc29sdmUpXG4gICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JpcHQuc3JjID0gc3JjO1xuICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHdhaXRGb3JQYWdlTG9hZGVkKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICBzY3JpcHQucmVtb3ZlKCk7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZChzY3JpcHQpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvYWRTY3JpcHQ7XG4iXSwibmFtZXMiOlsiTG9nZ2VyIiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwid2FybiIsImluZm8iLCJlcnJvciIsInRyYWNlIiwiZ3JvdXAiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwiY29uc3RydWN0b3IiLCJ0YWciLCJiaW5kZXIiLCJwdXNoIiwidG9TdHJpbmciLCJ0aGlzIiwiYmluZCIsImdsb2JhbFRoaXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhc3luYyIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJvayIsIlJlZmVyZW5jZUVycm9yIiwic3RhdHVzVGV4dCIsInRleHQiLCJkb2N1bWVudCIsInJlYWR5U3RhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwic2Fzc1BhdGgiLCJsb2dnZXIiLCJzb3VyY2UiLCJsb2FkUmF3VGV4dCIsInJlamVjdCIsInNyYyIsInRlc3QiLCJsb2NhdGlvbiIsImhyZWYiLCJyZXBsYWNlIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImZldGNoVXJsVGV4dCIsInRoZW4iLCJpbm5lckhUTUwiLCJoZWFkIiwiYXBwZW5kIiwiY2F0Y2giLCJ3YWl0Rm9yUGFnZUxvYWRlZCIsInJlbW92ZSIsImxvYWRTY3JpcHQiLCJTYXNzIiwiY29tcGlsZSIsImRvU2NzcyIsInNjc3NEb20iLCJIVE1MU3R5bGVFbGVtZW50IiwiSFRNTExpbmtFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwic2Nzc1RleHQiLCJ0cmltIiwibGVuZ3RoIiwicmVzdWx0Iiwic3RhdHVzIiwiY29sdW1uIiwibGluZSIsIm1lc3NhZ2UiLCJFcnJvciIsInN0eWxlIiwicmVwbGFjZVdpdGgiLCJBcnJheSIsImZyb20iLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImZpbHRlciIsImNvbmNhdCIsImxpbmsiLCJyZWR1Y2UiLCJwcmV2UHJvbWlzZSIsInNjc3NEb21JbmRleCIsInNjc3NEb21zIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsImZvckVhY2giLCJtdXRhdGlvbiIsImFkZGVkTm9kZXMiLCJub2RlIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJkZXRhaWwiLCJmaW5hbGx5Il0sInNvdXJjZVJvb3QiOiIifQ==